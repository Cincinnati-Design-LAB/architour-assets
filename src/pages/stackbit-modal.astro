---
import { Image } from "@unpic/astro";
import Layout from "@layouts/Layout.astro";
import { getPaginatedImages } from "@content/utils/get-images";

const referer = Astro.request.headers.get("referer");

if (
  (import.meta.env.SKIP_REFERER_CHECK || "").toString() !== "true" &&
  (!referer || !referer.startsWith("https://app.stackbit.com/"))
) {
  console.error("Invalid referer", referer);
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}
// console.log(Astro.request.);

const imagePages = await getPaginatedImages();

const uploadKey = import.meta.env.UPLOAD_SECRET_KEY.toString();

// const images = imagePages[0].images;
const images = imagePages.flatMap((page) => page.images);

// Note: Using underscores to pinpoint selectors being used by client-side JS.
// Probably a better way to do this.
---

<Layout title="Stackbit Modal">
  <main class="p-4">
    <div class="mb-4 text-right">
      <input type="file" id="_image-file" class="hidden" />
      <button
        id="_upload-trigger"
        class="inline-block py-2 px-6 bg-blue-500 text-white"
      >
        Upload New Image
      </button>
    </div>

    <div class="grid grid-cols-4 gap-4">
      {
        images.map((image) => {
          return (
            <div
              class="_select-image overflow-hidden hover:cursor-pointer border-4 border-transparent hover:border-blue-300 transition-all duration-300"
              data-public-id={image.public_id}
              data-width={image.width}
              data-height={image.height}
              data-url={image.url}>
              <Image src={image.url} aspectRatio={1} layout="fullWidth" />
            </div>
          );
        })
      }
    </div>
  </main>
</Layout>

<script define:vars={{ uploadKey }}>
  // This is targeting the surrounding divs and not the image itself
  const images = document.querySelectorAll("._select-image");

  // Listen for clicks on images and send `postMessage`
  images.forEach((image) => {
    image.addEventListener("click", function () {
      const public_id = image.getAttribute("data-public-id");
      const width = parseInt(image.getAttribute("data-width"));
      const height = parseInt(image.getAttribute("data-height"));
      const url = image.getAttribute("data-url");

      console.log("Clicked image", public_id);
      if (window.parent) {
        window.parent.postMessage(
          { type: "clearyst-cloudinary-assets", public_id, width, height, url },
          "*"
        );
      }
    });
  });

  const imageFileEl = document.getElementById("_image-file");
  imageFileEl.addEventListener("change", async function () {
    let imageFile = document.getElementById("_image-file").files[0];
    // console.log(imageFile);

    if (!imageFile) return;

    const fileReader = new FileReader();
    // console.log(imageFile);

    fileReader.addEventListener("load", async function (event) {
      const base64Image = event.target.result;

      // console.log({ base64Image, imageFile });
      // return false;

      if (typeof base64Image !== "string") {
        console.error("base64Image is not a string");
        return;
      }

      let formData = new FormData();
      formData.append("__key__", uploadKey);
      formData.append("imageUrl", base64Image);
      formData.append("imageFilename", imageFile.name);
      const res = await fetch("/api/upload", {
        method: "POST",
        body: formData,
      });

      const response = await res.json();

      if (!response.success) {
        console.error("Something went wrong uploading the image");
        return;
      }

      if (!response.public_id) {
        console.error("No public_id returned from upload");
        return;
      }

      console.log("Image uploaded", response.public_id);
      if (window.parent) {
        window.parent.postMessage(
          { type: "clearyst-cloudinary-assets", public_id: response.public_id },
          "*"
        );
      }
    });

    fileReader.readAsDataURL(imageFile);
  });

  // Upload file control
  let uploadTrigger = document.getElementById("_upload-trigger");
  uploadTrigger.addEventListener("click", async function () {
    imageFileEl.click();
  });
</script>
